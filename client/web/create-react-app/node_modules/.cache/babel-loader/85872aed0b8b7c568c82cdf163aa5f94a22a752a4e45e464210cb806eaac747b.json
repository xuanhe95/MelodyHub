{"ast":null,"code":"var _jsxFileName = \"/Users/xander/Documents/MCIT/MelodyTracker/client/web/create-react-app/src/menu-items/pages.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// assets\nimport { IconKey, IconPlaylist } from '@tabler/icons-react';\nimport config from '../config.json';\nimport React, { useState, useEffect } from 'react';\n\n// constant\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst icons = {\n  IconKey,\n  IconPlaylist\n};\n\n// ==============================|| EXTRA PAGES MENU ITEMS ||============================== //\n\n// 示例的用户播放列表数据\n// const userPlaylists = [\n//   { id: 'playlist1', title: 'Playlist 1', url: 'playlists' },\n//   { id: 'playlist2', title: 'Playlist 2', url: 'playlists2' },\n//   // 可以根据需要添加更多的播放列表项\n// ];\n\n// // 根据用户播放列表数据生成菜单项\n// const generatePlaylistMenuItems = () => {\n//   return userPlaylists.map((playlist) => ({\n//     id: playlist.id,\n//     title: playlist.title,\n//     type: 'item',\n//     url: playlist.url,\n//     target: false\n//   }));\n// };\n\n// 根据用户播放列表数据生成菜单项\nasync function generatePlaylistMenuItems() {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('Token is null');\n      return [];\n    }\n    const requestOptions = {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n      // redirect: 'follow' // 如果您需要处理重定向，可以取消注释\n    };\n\n    // 确保使用模板字符串中的`${}`来动态插入服务器主机和端口\n    const response = await fetch(`http://${config.server_host}:${config.server_port}/api/playlists`, requestOptions);\n    console.log('response:', response);\n    if (!response.ok) {\n      console.error('Failed to fetch playlists:', response.statusText);\n      return [];\n    }\n\n    // 确保在调用json()方法时使用await，因为它返回一个Promise\n    const userPlaylists = await response.json();\n    console.log('userPlaylists:', userPlaylists);\n    // 检查userPlaylists是否为期望的数组格式\n    if (!Array.isArray(userPlaylists)) {\n      console.error('Playlists data is not an array');\n      return [];\n    }\n    userPlaylists.map(playlist => ({\n      id: playlist.playlist_id,\n      title: playlist.name,\n      type: 'item',\n      url: `/playlist/${playlist.playlist_id}`,\n      // 假设这是对应的前端路由\n      target: false\n    }));\n    console.log('userPlaylists:', userPlaylists);\n    return userPlaylists;\n  } catch (error) {\n    console.error('Error during fetching playlists:', error);\n    return [];\n  }\n}\nconst MenuComponent = () => {\n  _s();\n  const [menuItems, setMenuItems] = useState([]);\n  useEffect(() => {\n    generatePlaylistMenuItems().then(items => {\n      setMenuItems(items);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: menuItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(MenuComponent, \"aerj4MrH8qL8Ldj4pa1rYEuE5iM=\");\n_c = MenuComponent;\nconst bpages = {\n  id: 'pages',\n  // title: 'PlayLists',\n  // caption: 'All Musics',\n  type: 'group',\n  children: [{\n    id: 'playlists',\n    title: 'Playlists',\n    type: 'collapse',\n    icon: icons.IconPlaylist,\n    children: generatePlaylistMenuItems()\n    // 使用动态生成的播放列表项\n  }, {\n    id: 'authentication',\n    title: 'Authentication',\n    type: 'collapse',\n    icon: icons.IconKey,\n    children: [{\n      id: 'login3',\n      title: 'Login',\n      type: 'item',\n      url: '/pages/login/login3',\n      target: true\n    }, {\n      id: 'register3',\n      title: 'Register',\n      type: 'item',\n      url: '/pages/register/register3',\n      target: true\n    }]\n  }]\n};\nconst pages = () => {\n  _s2();\n  const [menuItems, setMenuItems] = useState([]);\n  useEffect(() => {\n    generatePlaylistMenuItems().then(items => {\n      setMenuItems(items);\n    });\n  }, []);\n  const dynamicPages = {\n    ...bpages,\n    children: [...bpages.children, ...menuItems]\n  };\n};\n_s2(pages, \"aerj4MrH8qL8Ldj4pa1rYEuE5iM=\");\nexport default pages;\nvar _c;\n$RefreshReg$(_c, \"MenuComponent\");","map":{"version":3,"names":["IconKey","IconPlaylist","config","React","useState","useEffect","jsxDEV","_jsxDEV","icons","generatePlaylistMenuItems","token","localStorage","getItem","console","error","requestOptions","method","headers","Headers","response","fetch","server_host","server_port","log","ok","statusText","userPlaylists","json","Array","isArray","map","playlist","id","playlist_id","title","name","type","url","target","MenuComponent","_s","menuItems","setMenuItems","then","items","children","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","bpages","icon","pages","_s2","dynamicPages","$RefreshReg$"],"sources":["/Users/xander/Documents/MCIT/MelodyTracker/client/web/create-react-app/src/menu-items/pages.js"],"sourcesContent":["// assets\nimport { IconKey, IconPlaylist } from '@tabler/icons-react';\nimport config from '../config.json';\n\nimport React, { useState, useEffect } from 'react';\n\n// constant\nconst icons = {\n  IconKey, IconPlaylist\n};\n\n// ==============================|| EXTRA PAGES MENU ITEMS ||============================== //\n\n// 示例的用户播放列表数据\n// const userPlaylists = [\n//   { id: 'playlist1', title: 'Playlist 1', url: 'playlists' },\n//   { id: 'playlist2', title: 'Playlist 2', url: 'playlists2' },\n//   // 可以根据需要添加更多的播放列表项\n// ];\n\n// // 根据用户播放列表数据生成菜单项\n// const generatePlaylistMenuItems = () => {\n//   return userPlaylists.map((playlist) => ({\n//     id: playlist.id,\n//     title: playlist.title,\n//     type: 'item',\n//     url: playlist.url,\n//     target: false\n//   }));\n// };\n\n// 根据用户播放列表数据生成菜单项\nasync function generatePlaylistMenuItems() {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('Token is null');\n      return [];\n    }\n\n    const requestOptions = {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }),\n      // redirect: 'follow' // 如果您需要处理重定向，可以取消注释\n    };\n\n    // 确保使用模板字符串中的`${}`来动态插入服务器主机和端口\n    const response = await fetch(`http://${config.server_host}:${config.server_port}/api/playlists`, requestOptions);\n    console.log('response:', response);\n\n    if (!response.ok) {\n      console.error('Failed to fetch playlists:', response.statusText);\n      return [];\n    }\n\n    // 确保在调用json()方法时使用await，因为它返回一个Promise\n    const userPlaylists = await response.json();\n    console.log('userPlaylists:', userPlaylists);\n    // 检查userPlaylists是否为期望的数组格式\n    if (!Array.isArray(userPlaylists)) {\n      console.error('Playlists data is not an array');\n      return [];\n    }\n\n    userPlaylists.map((playlist) => ({\n      id: playlist.playlist_id,\n      title: playlist.name,\n      type: 'item',\n      url: `/playlist/${playlist.playlist_id}`, // 假设这是对应的前端路由\n      target: false\n    }));\n\n    console.log('userPlaylists:', userPlaylists);\n\n    return userPlaylists;\n\n  } catch (error) {\n    console.error('Error during fetching playlists:', error);\n    return [];\n  }\n}\n\nconst MenuComponent = () => {\n  const [menuItems, setMenuItems] = useState([]);\n\n  useEffect(() => {\n    generatePlaylistMenuItems().then((items) => {\n      setMenuItems(items);\n    });\n  }, []);\n\n  return (\n    <div>\n      {menuItems.map((item) => (\n        <div key={item.id}>\n          <p>{item.title}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n\nconst bpages = {\n  id: 'pages',\n  // title: 'PlayLists',\n  // caption: 'All Musics',\n  type: 'group',\n  children: [\n    {\n      id: 'playlists',\n      title: 'Playlists',\n      type: 'collapse',\n      icon: icons.IconPlaylist,\n      children:\n        generatePlaylistMenuItems()\n      // 使用动态生成的播放列表项\n    },\n\n    {\n      id: 'authentication',\n      title: 'Authentication',\n      type: 'collapse',\n      icon: icons.IconKey,\n\n      children: [\n        {\n          id: 'login3',\n          title: 'Login',\n          type: 'item',\n          url: '/pages/login/login3',\n          target: true\n        },\n        {\n          id: 'register3',\n          title: 'Register',\n          type: 'item',\n          url: '/pages/register/register3',\n          target: true\n        }\n      ]\n    },\n  ]\n};\n\n\nconst pages = () => {\n  const [menuItems, setMenuItems] = useState([]);\n\n  useEffect(() => {\n    generatePlaylistMenuItems().then((items) => {\n      setMenuItems(items);\n    });\n  }, []);\n\n  const dynamicPages = {\n    ...bpages,\n    children: [\n      ...bpages.children,\n      ...menuItems\n    ]\n\n  };\n\n}\n\n\nexport default pages;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}