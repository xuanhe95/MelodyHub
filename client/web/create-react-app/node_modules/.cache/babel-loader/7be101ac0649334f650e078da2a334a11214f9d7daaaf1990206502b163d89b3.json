{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { usePopupState, anchorRef, bindTrigger, bindContextMenu, bindToggle, bindHover, bindFocus, bindMenu, bindPopover, bindPopper, bindDoubleClick, bindDialog } from \"./hooks.mjs\";\nexport { anchorRef, bindTrigger, bindContextMenu, bindToggle, bindHover, bindFocus, bindMenu, bindPopover, bindPopper, bindDoubleClick, bindDialog };\nexport default function PopupState({\n  children,\n  popupId,\n  variant,\n  parentPopupState,\n  disableAutoFocus\n}) {\n  const popupState = usePopupState({\n    popupId,\n    variant,\n    parentPopupState,\n    disableAutoFocus\n  });\n  const result = children(popupState);\n  return result != null ? result : null;\n}\nPopupState.propTypes = {\n  /**\n   * The render function.\n   *\n   * @param {object} props the properties injected by `PopupState`:\n   * <ul>\n   *   <li>`open(eventOrAnchorEl)`: opens the popup</li>\n   *   <li>`close()`: closes the popup</li>\n   *   <li>`toggle(eventOrAnchorEl)`: opens the popup if it is closed, or\n   *     closes the popup if it is open.\n   *   </li>\n   *   <li>`setOpen(open, [eventOrAnchorEl])`: sets whether the popup is open.\n   *     `eventOrAnchorEl` is required if `open` is truthy.\n   *   </li>\n   *   <li>`isOpen`: `true`/`false` if the popup is open/closed</li>\n   *   <li>`anchorEl`: the current anchor element (`null` the popup is closed)</li>\n   *   <li>`popupId`: the `popupId` prop you passed</li>\n   * </ul>\n   *\n   * @returns {React.Node} the content to display\n   */\n  children: PropTypes.func.isRequired,\n  /**\n   * The `id` property to use for the popup.  Will be passed to the render\n   * function as `bindPopup.id`, and also used for the `aria-controls` property\n   * passed to the trigger component via `bindTrigger`.\n   */\n  popupId: PropTypes.string,\n  /**\n   * Which type of popup you are controlling.  Use `'popover'` for `Popover`\n   * and `Menu`; use `'popper'` for `Popper`s.  Right now this only affects\n   * whether `aria-controls` or `aria-describedby` is used on the trigger\n   * component.\n   */\n  variant: PropTypes.oneOf(['popover', 'popper']).isRequired,\n  /**\n   * The popupState of the parent menu (for cascading menus)\n   */\n  parentPopupState: PropTypes.object,\n  /**\n   * Will focus the popup when it opens unless disableAutoFocus is explicitly false.\n   */\n  disableAutoFocus: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}