{"ast":null,"code":"// assets\nimport { IconKey, IconPlaylist } from '@tabler/icons-react';\nimport config from '../config.json';\n\n// constant\nconst icons = {\n  IconKey,\n  IconPlaylist\n};\n\n// ==============================|| EXTRA PAGES MENU ITEMS ||============================== //\n\n// 根据用户播放列表数据生成菜单项\nasync function generatePlaylistMenuItems() {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('Token is null');\n      return [];\n    }\n    const requestOptions = {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      })\n      // redirect: 'follow' // 如果您需要处理重定向，可以取消注释\n    };\n\n    // 确保使用模板字符串中的`${}`来动态插入服务器主机和端口\n    const response = await fetch(`http://${config.server_host}:${config.server_port}/api/playlists`, requestOptions);\n    console.log('response:', response);\n    if (!response.ok) {\n      console.error('Failed to fetch playlists:', response.statusText);\n      return [];\n    }\n\n    // 确保在调用json()方法时使用await，因为它返回一个Promise\n    const userPlaylists = await response.json();\n\n    // 检查userPlaylists是否为期望的数组格式\n    if (!Array.isArray(userPlaylists)) {\n      console.error('Playlists data is not an array');\n      return [];\n    }\n    return userPlaylists.map(playlist => ({\n      id: playlist.id,\n      title: playlist.title,\n      type: 'item',\n      url: `/playlist/${playlist.id}`,\n      // 假设这是对应的前端路由\n      target: false\n    }));\n  } catch (error) {\n    console.error('Error during fetching playlists:', error);\n    return [];\n  }\n}\nconst pages = {\n  id: 'pages',\n  // title: 'PlayLists',\n  // caption: 'All Musics',\n  type: 'group',\n  children: [{\n    id: 'playlists',\n    title: 'Playlists',\n    type: 'collapse',\n    icon: icons.IconPlaylist,\n    children: generatePlaylistMenuItems()\n    // 使用动态生成的播放列表项\n  }, {\n    id: 'authentication',\n    title: 'Authentication',\n    type: 'collapse',\n    icon: icons.IconKey,\n    children: [{\n      id: 'login3',\n      title: 'Login',\n      type: 'item',\n      url: '/pages/login/login3',\n      target: true\n    }, {\n      id: 'register3',\n      title: 'Register',\n      type: 'item',\n      url: '/pages/register/register3',\n      target: true\n    }]\n  }]\n};\nexport default pages;","map":{"version":3,"names":["IconKey","IconPlaylist","config","icons","generatePlaylistMenuItems","token","localStorage","getItem","console","error","requestOptions","method","headers","Headers","response","fetch","server_host","server_port","log","ok","statusText","userPlaylists","json","Array","isArray","map","playlist","id","title","type","url","target","pages","children","icon"],"sources":["/Users/xander/Documents/MCIT/MelodyTracker/client/web/create-react-app/src/menu-items/pages.js"],"sourcesContent":["// assets\nimport { IconKey, IconPlaylist } from '@tabler/icons-react';\nimport config from '../config.json';\n\n// constant\nconst icons = {\n  IconKey, IconPlaylist\n};\n\n// ==============================|| EXTRA PAGES MENU ITEMS ||============================== //\n\n\n\n// 根据用户播放列表数据生成菜单项\nasync function generatePlaylistMenuItems() {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('Token is null');\n      return [];\n    }\n\n    const requestOptions = {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }),\n      // redirect: 'follow' // 如果您需要处理重定向，可以取消注释\n    };\n\n    // 确保使用模板字符串中的`${}`来动态插入服务器主机和端口\n    const response = await fetch(`http://${config.server_host}:${config.server_port}/api/playlists`, requestOptions);\n    console.log('response:', response);\n\n    if (!response.ok) {\n      console.error('Failed to fetch playlists:', response.statusText);\n      return [];\n    }\n\n    // 确保在调用json()方法时使用await，因为它返回一个Promise\n    const userPlaylists = await response.json();\n\n    // 检查userPlaylists是否为期望的数组格式\n    if (!Array.isArray(userPlaylists)) {\n      console.error('Playlists data is not an array');\n      return [];\n    }\n\n    return userPlaylists.map((playlist) => ({\n      id: playlist.id,\n      title: playlist.title,\n      type: 'item',\n      url: `/playlist/${playlist.id}`, // 假设这是对应的前端路由\n      target: false\n    }));\n\n  } catch (error) {\n    console.error('Error during fetching playlists:', error);\n    return [];\n  }\n}\n\nconst pages = {\n  id: 'pages',\n  // title: 'PlayLists',\n  // caption: 'All Musics',\n  type: 'group',\n  children: [\n    {\n      id: 'playlists',\n      title: 'Playlists',\n      type: 'collapse',\n      icon: icons.IconPlaylist,\n      children:\n        generatePlaylistMenuItems()\n      // 使用动态生成的播放列表项\n    },\n\n    {\n      id: 'authentication',\n      title: 'Authentication',\n      type: 'collapse',\n      icon: icons.IconKey,\n\n      children: [\n        {\n          id: 'login3',\n          title: 'Login',\n          type: 'item',\n          url: '/pages/login/login3',\n          target: true\n        },\n        {\n          id: 'register3',\n          title: 'Register',\n          type: 'item',\n          url: '/pages/register/register3',\n          target: true\n        }\n      ]\n    },\n  ]\n};\n\nexport default pages;\n"],"mappings":"AAAA;AACA,SAASA,OAAO,EAAEC,YAAY,QAAQ,qBAAqB;AAC3D,OAAOC,MAAM,MAAM,gBAAgB;;AAEnC;AACA,MAAMC,KAAK,GAAG;EACZH,OAAO;EAAEC;AACX,CAAC;;AAED;;AAIA;AACA,eAAeG,yBAAyBA,CAAA,EAAG;EACzC,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,KAAK,CAAC,eAAe,CAAC;MAC9B,OAAO,EAAE;IACX;IAEA,MAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,IAAIC,OAAO,CAAC;QACnB,eAAe,EAAG,UAASR,KAAM,EAAC;QAClC,cAAc,EAAE;MAClB,CAAC;MACD;IACF,CAAC;;IAED;IACA,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAASb,MAAM,CAACc,WAAY,IAAGd,MAAM,CAACe,WAAY,gBAAe,EAAEP,cAAc,CAAC;IAChHF,OAAO,CAACU,GAAG,CAAC,WAAW,EAAEJ,QAAQ,CAAC;IAElC,IAAI,CAACA,QAAQ,CAACK,EAAE,EAAE;MAChBX,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEK,QAAQ,CAACM,UAAU,CAAC;MAChE,OAAO,EAAE;IACX;;IAEA;IACA,MAAMC,aAAa,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;IAE3C;IACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,EAAE;MACjCb,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C,OAAO,EAAE;IACX;IAEA,OAAOY,aAAa,CAACI,GAAG,CAAEC,QAAQ,KAAM;MACtCC,EAAE,EAAED,QAAQ,CAACC,EAAE;MACfC,KAAK,EAAEF,QAAQ,CAACE,KAAK;MACrBC,IAAI,EAAE,MAAM;MACZC,GAAG,EAAG,aAAYJ,QAAQ,CAACC,EAAG,EAAC;MAAE;MACjCI,MAAM,EAAE;IACV,CAAC,CAAC,CAAC;EAEL,CAAC,CAAC,OAAOtB,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,EAAE;EACX;AACF;AAEA,MAAMuB,KAAK,GAAG;EACZL,EAAE,EAAE,OAAO;EACX;EACA;EACAE,IAAI,EAAE,OAAO;EACbI,QAAQ,EAAE,CACR;IACEN,EAAE,EAAE,WAAW;IACfC,KAAK,EAAE,WAAW;IAClBC,IAAI,EAAE,UAAU;IAChBK,IAAI,EAAE/B,KAAK,CAACF,YAAY;IACxBgC,QAAQ,EACN7B,yBAAyB,CAAC;IAC5B;EACF,CAAC,EAED;IACEuB,EAAE,EAAE,gBAAgB;IACpBC,KAAK,EAAE,gBAAgB;IACvBC,IAAI,EAAE,UAAU;IAChBK,IAAI,EAAE/B,KAAK,CAACH,OAAO;IAEnBiC,QAAQ,EAAE,CACR;MACEN,EAAE,EAAE,QAAQ;MACZC,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE,MAAM;MACZC,GAAG,EAAE,qBAAqB;MAC1BC,MAAM,EAAE;IACV,CAAC,EACD;MACEJ,EAAE,EAAE,WAAW;MACfC,KAAK,EAAE,UAAU;MACjBC,IAAI,EAAE,MAAM;MACZC,GAAG,EAAE,2BAA2B;MAChCC,MAAM,EAAE;IACV,CAAC;EAEL,CAAC;AAEL,CAAC;AAED,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}