{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { NumberInputActionTypes } from './numberInputAction.types';\nimport { clampStepwise, isNumber } from './utils';\nfunction getClampedValues(rawValue, context) {\n  const {\n    min,\n    max,\n    step\n  } = context;\n  const clampedValue = rawValue === null ? null : clampStepwise(rawValue, min, max, step);\n  const newInputValue = clampedValue === null ? '' : String(clampedValue);\n  return {\n    value: clampedValue,\n    inputValue: newInputValue\n  };\n}\nfunction stepValue(state, context, direction, multiplier) {\n  const {\n    value\n  } = state;\n  const {\n    step = 1,\n    min,\n    max\n  } = context;\n  if (isNumber(value)) {\n    return {\n      up: value + (step != null ? step : 1) * multiplier,\n      down: value - (step != null ? step : 1) * multiplier\n    }[direction];\n  }\n  return {\n    up: min != null ? min : 1,\n    down: max != null ? max : -1\n  }[direction];\n}\nfunction handleClamp(state, context, inputValue) {\n  const {\n    getInputValueAsString\n  } = context;\n  const numberValueAsString = getInputValueAsString(inputValue);\n  const intermediateValue = numberValueAsString === '' || numberValueAsString === '-' ? null : parseInt(numberValueAsString, 10);\n  const clampedValues = getClampedValues(intermediateValue, context);\n  return _extends({}, state, clampedValues);\n}\nfunction handleInputChange(state, context, inputValue) {\n  const {\n    getInputValueAsString\n  } = context;\n  const numberValueAsString = getInputValueAsString(inputValue);\n  if (numberValueAsString.match(/^-?\\d+?$/) || numberValueAsString === '' || numberValueAsString === '-') {\n    return _extends({}, state, {\n      inputValue: numberValueAsString\n    });\n  }\n  return state;\n}\n\n// use this for ArrowUp, ArrowDown, button clicks\n// use this with applyMultiplier: true for PageUp, PageDown, button shift-clicks\nfunction handleStep(state, context, applyMultiplier, direction) {\n  const multiplier = applyMultiplier ? context.shiftMultiplier : 1;\n  const newValue = stepValue(state, context, direction, multiplier);\n  const clampedValues = getClampedValues(newValue, context);\n  return _extends({}, state, clampedValues);\n}\nfunction handleToMinOrMax(state, context, to) {\n  const newValue = context[to];\n  if (!isNumber(newValue)) {\n    return state;\n  }\n  return _extends({}, state, {\n    value: newValue,\n    inputValue: String(newValue)\n  });\n}\nexport function numberInputReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n  switch (type) {\n    case NumberInputActionTypes.clamp:\n      return handleClamp(state, context, action.inputValue);\n    case NumberInputActionTypes.inputChange:\n      return handleInputChange(state, context, action.inputValue);\n    case NumberInputActionTypes.increment:\n      return handleStep(state, context, action.applyMultiplier, 'up');\n    case NumberInputActionTypes.decrement:\n      return handleStep(state, context, action.applyMultiplier, 'down');\n    case NumberInputActionTypes.incrementToMax:\n      return handleToMinOrMax(state, context, 'max');\n    case NumberInputActionTypes.decrementToMin:\n      return handleToMinOrMax(state, context, 'min');\n    case NumberInputActionTypes.resetInputValue:\n      return _extends({}, state, {\n        inputValue: String(state.value)\n      });\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}