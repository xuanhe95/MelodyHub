openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/XUANHE95/Database/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/XUANHE95/Database/1.0.0
  - url: /api
info:
  version: "1.0.0"
  title: Sample Password Flow OAuth2 Project
  description: >-
    This is an example of using OAuth2 Password Flow in a specification to
    describe security to your API.
security:
  - password:
      - read
      - write

paths:
  /login:
    post:
      summary: Login
      description: >-
        User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        "200":
          description: OK

  /user:
    get:
      summary: Find a user

      responses:
        "200":
          description: OK
    post:
      summary: Create new user
      description: >-
        Create a new user.
      responses:
        "200":
          description: OK

    put:
      summary: Update user
      responses:
        "200":
          description: OK

    delete:
      summary: Delete user
      responses:
        "200":
          description: OK

  /album/{id}:
    get:
      summary: Get tracks of an album
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the album to get tracks for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "404":
          description: Album not found
          content:
            application/json:
              example:
                message: Album not found
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                message: Internal server error

components:
  securitySchemes:
    password:
      type: oauth2
      flows:
        password:
          tokenUrl: "http://example.com/oauth/token"
          scopes:
            write: allows modifying resources
            read: allows reading resources
  schemas:
    Track:
      type: object
      properties:
        id:
          type: string
          format: varchar(255)
        tempo:
          type: number
          format: float
        name:
          type: string
          format: varchar(255)
        danceability:
          type: number
          format: float
        release_date:
          type: string
          format: date
        energy:
          type: number
          format: float
        duration_ms:
          type: integer
          format: int32
      required:
        - id
        - name
        - release_date
        - duration_ms
    Album:
      type: object
      properties:
        id:
          type: string
          format: varchar(255)
        title:
          type: string
          format: varchar(255)
        tracks:
          type: array
          items:
            $ref: "#/components/schemas/Track"
      required:
        - id
        - title
    TracksAlbumsMapping:
      type: object
      properties:
        track_id:
          type: string
          format: varchar(255)
        album_id:
          type: string
          format: varchar(255)
      required:
        - track_id
        - album_id
